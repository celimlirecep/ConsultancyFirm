// <auto-generated />
using System;
using ColsultancyFirm.DAL.Concreate.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ColsultancyFirm.DAL.Migrations
{
    [DbContext(typeof(ConsultantFirmContext))]
    [Migration("20220608190257_added-message")]
    partial class addedmessage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.16");

            modelBuilder.Entity("ConsultancyFirm.EL.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorAbout")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorFullName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AuthorHourlyWage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.AuthorCategory", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AuthorCategory");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.AuthorHeading", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "HeadingId");

                    b.HasIndex("HeadingId");

                    b.ToTable("AuthorHeadings");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryDesription")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.Heading", b =>
                {
                    b.Property<int>("HeadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeadingContent")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadingImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadingName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HeadingPublishTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadingUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.HasKey("HeadingId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Headings");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.HomeSlider", b =>
                {
                    b.Property<int>("HomeSliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HomeSliderHead")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeSliderImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeSliderRoute")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeSliderUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.HasKey("HomeSliderId");

                    b.ToTable("HomeSliders");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.MemberService", b =>
                {
                    b.Property<int>("MemberServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("MemberServiceId");

                    b.ToTable("MemberServices");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageContent")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MessageSendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageTo")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.AuthorCategory", b =>
                {
                    b.HasOne("ConsultancyFirm.EL.Author", "Author")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultancyFirm.EL.Category", "Category")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.AuthorHeading", b =>
                {
                    b.HasOne("ConsultancyFirm.EL.Author", "Author")
                        .WithMany("AuthorHeadings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultancyFirm.EL.Heading", "Heading")
                        .WithMany("AuthorHeadings")
                        .HasForeignKey("HeadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Heading");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.Heading", b =>
                {
                    b.HasOne("ConsultancyFirm.EL.Category", "Category")
                        .WithMany("Headings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.Author", b =>
                {
                    b.Navigation("AuthorCategories");

                    b.Navigation("AuthorHeadings");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.Category", b =>
                {
                    b.Navigation("AuthorCategories");

                    b.Navigation("Headings");
                });

            modelBuilder.Entity("ConsultancyFirm.EL.Heading", b =>
                {
                    b.Navigation("AuthorHeadings");
                });
#pragma warning restore 612, 618
        }
    }
}
